<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Documents</name>
    </assembly>
    <members>
        <member name="T:Documents.OwinStartup">
            <summary>
            Owin configuration
            </summary>
        </member>
        <member name="M:Documents.OwinStartup.Configuration(Owin.IAppBuilder)">
            <summary>
            Configuration
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Documents.OwinStartup.ConfigureAuth(Owin.IAppBuilder)">
            <summary>
            Configuration auth
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:Documents.UnityConfig">
            <summary>
            Specifies the Unity configuration for the main container.
            </summary>
        </member>
        <member name="M:Documents.UnityConfig.Resolve``1">
            <summary>
            Resolve instance
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Documents.UnityConfig.RegisterComponents(System.Web.Http.HttpConfiguration)">
            <summary>
            Register components
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:Documents.HelpPageConfig">
            <summary>
            Help page configuration
            </summary>
        </member>
        <member name="M:Documents.HelpPageConfig.Register(System.Web.Http.HttpConfiguration)">
            <summary>
            Register help provider
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:Documents.WebApiConfig">
            <summary>
            Web api config
            </summary>
        </member>
        <member name="M:Documents.WebApiConfig.Register(System.Web.Http.HttpConfiguration)">
            <summary>
            Configure web api
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Documents.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:Documents.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,Documents.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:Documents.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:Documents.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:Documents.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:Documents.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:Documents.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Documents.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:Documents.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:Documents.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:Documents.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Documents.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:Documents.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,Documents.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,Documents.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:Documents.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:Documents.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(Documents.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:Documents.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:Documents.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Documents.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:Documents.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:Documents.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:Documents.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleKey.#ctor(Documents.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Documents.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:Documents.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:Documents.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Documents.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,Documents.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Documents.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:Documents.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:Documents.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:Documents.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:Documents.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:Documents.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Documents.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:Documents.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:Documents.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:Documents.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:Documents.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:Documents.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Documents.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:Documents.Controllers.AccountController">
            <summary>
            Provides main functionality for users: register, login, logout.
            </summary>
        </member>
        <member name="M:Documents.Controllers.AccountController.#ctor">
            <summary>
            Constructor
            </summary>
            <param name="userContext"></param>
        </member>
        <member name="M:Documents.Controllers.AccountController.RegisterManager(Documents.Models.RegisterViewModel)">
            <summary>
            Register new user with manager role
            POST: api/Account/Register/Manager
            </summary>
            <param name="data">Register data</param>
            <returns>
            <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/>s object containing the result of registration.
            </returns>
        </member>
        <member name="M:Documents.Controllers.AccountController.RegisterEmployee(Documents.Models.RegisterViewModel)">
            <summary>
            Register new user with manager employee
            POST: api/Account/Register/Employee
            </summary>
            <param name="data">Register data</param>
            <returns>
            <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/>s object containing the result of registration.
            </returns>
        </member>
        <member name="M:Documents.Controllers.AccountController.Login(Documents.Models.LoginViewModel)">
            <summary>
            POST: api/Account/Login
            </summary>
            <param name="data">Login data</param>
            <returns>
            <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/>s object containing the result of registration.
            </returns>
        </member>
        <member name="M:Documents.Controllers.AccountController.RegisterUser(Documents.Models.RegisterViewModel,System.Boolean)">
            <summary>
            Register user
            </summary>
            <param name="data">Login data</param>
            <param name="hasManager">Has user manager</param>
            <returns>
            <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/>s object containing the result of registration.
            </returns>
        </member>
        <member name="M:Documents.Controllers.AccountController.LoginUser(Documents.Models.ServiceUser)">
            <summary>
            Login user
            </summary>
            <param name="user">Service user</param>
        </member>
        <member name="M:Documents.Controllers.AccountController.Logout">
            <summary>
            POST api/Account/Logout
            </summary>
            <returns></returns>
        </member>
        <member name="T:Documents.Controllers.UserInfoController">
            <summary>
            Provides base functionality for logged user information.
            </summary>
        </member>
        <member name="M:Documents.Controllers.UserInfoController.#ctor(Documents.Services.IUserService)">
            <summary>
            Constructor
            </summary>
            <param name="userService"></param>
        </member>
        <member name="M:Documents.Controllers.UserInfoController.Retrive">
            <summary>
            Retrives a logged user information.
            GET: api/UserInfo
            </summary>
            <returns>
            <see cref="T:Documents.Data.UserDto"/>s object containing the user dto entity.
            </returns>
        </member>
        <member name="M:Documents.Controllers.UserInfoController.Update(Documents.Models.UserProfileViewModel)">
            <summary>
            Updates a logged user information. 
            PUT: api/UserInfo
            </summary>
            <param name="data">User profile information. 
            Password will be changed when password field is not empty.</param>
            <returns>
            <see cref="T:Documents.Data.UserDto"/>s object containing the user dto entity.
            </returns>
        </member>
        <member name="M:Documents.Controllers.UserInfoController.Delete">
            <summary>
            Delete a logged user information. 
            DELETE: api/UserInfo
            </summary>
            <returns>
            True if successfully otherwise False.
            </returns>
        </member>
        <member name="T:Documents.Controllers.CommentsController">
            <summary>
            Provides CRUD functionality for comments.
            </summary>
        </member>
        <member name="M:Documents.Controllers.CommentsController.#ctor(Documents.Services.ICommentService)">
            <summary>
            Constructor
            </summary>
            <param name="commentService"></param>
        </member>
        <member name="M:Documents.Controllers.CommentsController.Retrive(System.Guid)">
            <summary>
            Retrieves list of comments assosiated with document.
            GET: api/Comments/?documentId=543D3EC2-BD1F-4AD1-9DAA-D37BE8375893
            </summary>
            <param name="id">Document identity</param>
            <returns>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>s object containing the list of comments.
            </returns>
        </member>
        <member name="M:Documents.Controllers.CommentsController.Retrive(System.Int32)">
            <summary>
            Retrives a specific comment by identity.
            GET: api/Comments/5
            </summary>
            <param name="id">Comment identity</param>
            <returns>
            <see cref="T:Documents.Data.CommentDto"/>s object containing the comment dto entity.
            </returns>
        </member>
        <member name="M:Documents.Controllers.CommentsController.Create(Documents.Models.CommentViewModel)">
            <summary>
            Creates a new comment.
            POST: api/Comments
            </summary>
            <param name="data">Comment data. Name field is mandatory.</param>
            <returns>
            <see cref="T:Documents.Data.CommentDto"/>s object containing the comment dto entity.
            </returns>
        </member>
        <member name="M:Documents.Controllers.CommentsController.Update(System.Int32,Documents.Models.CommentViewModel)">
            <summary>
            Updates a specific comment by identity.
            PUT: api/Comments/5
            </summary>
            <param name="id">Comment identity</param>
            <param name="data">Comment data. Text field is mandatory.</param>
            <returns>
            <see cref="T:Documents.Data.CommentDto"/>s object containing the comment dto entity.
            </returns>
        </member>
        <member name="M:Documents.Controllers.CommentsController.Delete(System.Int32)">
            <summary>
            Delete a specific comment by identity.
            DELETE: api/Comments/5
            </summary>
            <param name="id">Comment identity</param>
            <returns>
            True if successfully otherwise False.
            </returns>
        </member>
        <member name="T:Documents.Controllers.DocumentsController">
            <summary>
            Provides CRUD functionality for documents.
            </summary>
        </member>
        <member name="M:Documents.Controllers.DocumentsController.Retrive">
            <summary>
            Retrieves list of all documents.
            GET: api/Documents
            </summary>
            <returns>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>s object containing the list of documents.
            </returns>
        </member>
        <member name="M:Documents.Controllers.DocumentsController.Retrive(System.Guid)">
            <summary>
            Retrives a specific document by identity.
            GET: api/Documents/543D3EC2-BD1F-4AD1-9DAA-D37BE8375893
            </summary>
            <param name="id">Document identity</param>
            <returns>
            <see cref="T:Documents.Data.DocumentDto"/>s object containing the document dto entity.
            </returns>
        </member>
        <member name="M:Documents.Controllers.DocumentsController.Create(Documents.Models.DocumentViewModel)">
            <summary>
            Creates a new document.
            POST: api/Documents
            </summary>
            <param name="data">Document data. Name field is mandatory.</param>
            <returns>
            <see cref="T:Documents.Data.DocumentDto"/>s object containing the document dto entity.
            </returns>
        </member>
        <member name="M:Documents.Controllers.DocumentsController.Update(System.Guid,Documents.Models.DocumentViewModel)">
            <summary>
            Updates a specific document by identity.
            PUT: api/Documents/543D3EC2-BD1F-4AD1-9DAA-D37BE8375893
            </summary>
            <param name="id">Document identity</param>
            <param name="data">Document data. Name field is mandatory.</param>
            <returns>
            <see cref="T:Documents.Data.DocumentDto"/>s object containing the document dto entity.
            </returns>
        </member>
        <member name="M:Documents.Controllers.DocumentsController.Delete(System.Guid)">
            <summary>
            Delete a specific document by identity.
            DELETE: api/Documents/543D3EC2-BD1F-4AD1-9DAA-D37BE8375893 
            </summary>
            <returns>
            True if successfully otherwise False.
            </returns>
        </member>
        <member name="T:Documents.Core.Extensions">
            <summary>
            Extensions methods to convert web api model to DTO objects
            </summary>
        </member>
        <member name="M:Documents.Core.Extensions.GetUserId``1(System.Security.Principal.IIdentity)">
            <summary>
            Get user id
            </summary>
            <typeparam name="T"></typeparam>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.Extensions.GetUserRole(System.Security.Principal.IIdentity)">
            <summary>
            Get user role
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.Extensions.ToDto(Documents.Models.RegisterViewModel)">
            <summary>
            Convert to UserDto
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.Extensions.ToDto(Documents.Models.UserProfileViewModel)">
            <summary>
            Convert to UserDto
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.Extensions.ToDto(Documents.Models.UserProfileViewModel,Documents.Data.UserDto)">
            <summary>
            Convert to UserDto
            </summary>
            <param name="model"></param>
            <param name="userDto"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.Extensions.ToDto(Documents.Models.CommentViewModel)">
            <summary>
            Convert to CommentDto
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.Extensions.ToDto(Documents.Models.CommentViewModel,Documents.Data.CommentDto)">
            <summary>
            Convert to CommentDto
            </summary>
            <param name="model"></param>
            <param name="commentDto"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.Extensions.ToDto(Documents.Models.DocumentViewModel)">
            <summary>
            Convert to DocumentDto
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.Extensions.ToDto(Documents.Models.DocumentViewModel,Documents.Data.DocumentDto)">
            <summary>
            Convert to DocumentDto
            </summary>
            <param name="model"></param>
            <param name="documentDto"></param>
            <returns></returns>
        </member>
        <member name="T:Documents.Core.ServiceUserStore">
            <summary>
            Class that implemented basic user management apis
            </summary>
        </member>
        <member name="M:Documents.Core.ServiceUserStore.#ctor(Documents.Utils.ILogger,Documents.Services.IUserService)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Documents.Core.ServiceUserStore.PerformAsyncAction(System.Action)">
            <summary>
            Performs async the specified action
            </summary>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:Documents.Core.ServiceUserStore.PerformAsyncFunction(System.Func{Documents.Models.ServiceUser})">
            <summary>
            Performs async the specified function and returns Task
            </summary>
            <param name="action">action to perform</param>
            <returns>Function result</returns>
        </member>
        <member name="M:Documents.Core.ServiceUserStore.CreateAsync(Documents.Models.ServiceUser)">
            <summary>
            Insert a new user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserStore.DeleteAsync(Documents.Models.ServiceUser)">
            <summary>
            Delete a user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserStore.FindByIdAsync(System.String)">
            <summary>
            Finds a user
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserStore.FindByNameAsync(System.String)">
            <summary>
            Find a user by name
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserStore.UpdateAsync(Documents.Models.ServiceUser)">
            <summary>
            Update a user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:Documents.Core.UnityResolver">
            <summary>
            Unity resolver
            </summary>
        </member>
        <member name="M:Documents.Core.UnityResolver.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Constructor
            </summary>
            <param name="container"></param>
        </member>
        <member name="T:Documents.Core.UnityFilterProvider">
            <summary>
            Unity filter provider
            </summary>
        </member>
        <member name="M:Documents.Core.UnityFilterProvider.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Constructor
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Documents.Core.UnityFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Get filters
            </summary>
            <param name="configuration"></param>
            <param name="actionDescriptor"></param>
            <returns></returns>
        </member>
        <member name="T:Documents.Core.ServiceUserManager">
            <summary>
            Service user manager for users where the primary key for the User is of type string
            </summary>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.#ctor(Documents.Utils.ILogger,Microsoft.AspNet.Identity.IUserStore{Documents.Models.ServiceUser})">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="store"></param>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Documents.Core.ServiceUserManager},Microsoft.Owin.IOwinContext)">
            <summary>
            Create user manager
            </summary>
            <param name="options"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.CreateIdentityAsync(Documents.Models.ServiceUser,System.String)">
            <summary>
            Creates a ClaimsIdentity representing the user
            </summary>
            <param name="user"></param>
            <param name="authenticationType"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.IsInRoleAsync(System.String,System.String)">
            <summary>
            Returns true if the user is in the specified role
            </summary>
            <param name="userId"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.UpdateAsync(Documents.Models.ServiceUser)">
            <summary>
            Update a user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.CreateAsync(Documents.Models.ServiceUser)">
            <summary>
            Create a user with no password
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.DeleteAsync(Documents.Models.ServiceUser)">
            <summary>
            Delete a user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.GetRolesAsync(System.String)">
            <summary>
            Returns the roles for the user
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.FindByIdAsync(System.String)">
            <summary>
             Find a user by id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.FindByNameAsync(System.String)">
            <summary>
            Find a user by user name
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserManager.FindAsync(System.String,System.String)">
            <summary>
             Return a user with the specified username and password or null if there is 
             no match.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Documents.Core.BaseController">
            <summary>
            Base controller to be used by all controllers
            </summary>
        </member>
        <member name="M:Documents.Core.BaseController.PerformAction``1(System.Func{``0})">
            <summary>
            Performs the specified action and returns IHttpActionResult
            </summary>
            <param name="action">action to perform</param>
            <returns>Action result</returns>
        </member>
        <member name="M:Documents.Core.BaseController.GetCurrentUserId">
            <summary>
            Get logged current user unique identity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.BaseController.GetPermissionsContext">
            <summary>
            Get permissions context for logged current user
            </summary>
            <returns></returns>
        </member>
        <member name="T:Documents.Core.ServiceUserPasswordHasher">
            <summary>
            Override password hashing to save password as clean text
            </summary>
        </member>
        <member name="M:Documents.Core.ServiceUserPasswordHasher.HashPassword(System.String)">
            <summary>
            Hash a password
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.ServiceUserPasswordHasher.VerifyHashedPassword(System.String,System.String)">
            <summary>
            Verify that a password matches the hashedPassword
            </summary>
            <param name="hashedPassword"></param>
            <param name="providedPassword"></param>
            <returns></returns>
        </member>
        <member name="T:Documents.Core.BaseContentPermissions">
            <summary>
            Provides base functionality to implement security permissions for specific content
            </summary>
        </member>
        <member name="P:Documents.Core.BaseContentPermissions.ContentOwner">
            <summary>
            Define content owner: "Any" or "Own".
            "Any" or empty uses by default
            </summary>
        </member>
        <member name="F:Documents.Core.BaseContentPermissions.allowedRoles">
            <summary>
            Allowed user roles
            </summary>
        </member>
        <member name="M:Documents.Core.BaseContentPermissions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Documents.Core.BaseContentPermissions.CheckIsOwnContent(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Check is own content
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.BaseContentPermissions.IsUserAuthenticated(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Check is user was authenticated
            </summary>
            <param name="actionContext"></param>
            <returns>
            True if authenticated otherwise False
            </returns>
        </member>
        <member name="M:Documents.Core.BaseContentPermissions.GetUserId(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Get user unique identity
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.BaseContentPermissions.GetUserRole(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Get user role
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.BaseContentPermissions.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Indicates whether the specified control is authorized.
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Documents.Core.BaseContentPermissions.IsContentAccess(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Check have user permissions to access for content
            </summary>
            <param name="actionContext"></param>
            <returns>
            True if successfullly otherwise False
            </returns>
        </member>
        <member name="M:Documents.Core.BaseContentPermissions.IsInRole(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Check is user have a specific role
            </summary>
            <param name="actionContext"></param>
            <returns>
            True if user have a specific role
            </returns>
        </member>
        <member name="T:Documents.Filters.CommentPermissions">
            <summary>
            Provides main functionality to implement security permissions for comments
            </summary>
        </member>
        <member name="M:Documents.Filters.CommentPermissions.CheckIsOwnContent(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Check is own content
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="T:Documents.Filters.DocumentPermissions">
            <summary>
            Provides main functionality to implement security permissions for documents
            </summary>
        </member>
        <member name="M:Documents.Filters.DocumentPermissions.CheckIsOwnContent(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Check is own content
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="T:Documents.WebApiApplication">
            <summary>
            Web api application
            </summary>
        </member>
        <member name="T:Documents.Models.ServiceUser">
            <summary>
            Web api user
            </summary>
        </member>
        <member name="P:Documents.Models.ServiceUser.Id">
            <summary>
            User identity
            </summary>
        </member>
        <member name="P:Documents.Models.ServiceUser.UserName">
            <summary>
            User unique name (login)
            </summary>
        </member>
        <member name="M:Documents.Models.ServiceUser.#ctor(Documents.Data.UserDto)">
            <summary>
            Constructor
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Documents.Models.ServiceUser.ToDto">
            <summary>
            Convert to DTO
            </summary>
            <returns></returns>
        </member>
        <member name="T:Documents.Models.DocumentViewModel">
            <summary>
            Represents document data
            </summary>
        </member>
        <member name="P:Documents.Models.DocumentViewModel.Name">
            <summary>
            Document name
            </summary>
        </member>
        <member name="P:Documents.Models.DocumentViewModel.Content">
            <summary>
            Document content
            </summary>
        </member>
        <member name="T:Documents.Models.CommentViewModel">
            <summary>
            Represents comment data
            </summary>
        </member>
        <member name="P:Documents.Models.CommentViewModel.Subject">
            <summary>
            Subject for comment
            </summary>
        </member>
        <member name="P:Documents.Models.CommentViewModel.Text">
            <summary>
            Commentary text
            </summary>
        </member>
        <member name="P:Documents.Models.CommentViewModel.DocumentId">
            <summary>
            Document unique identifier
            </summary>
        </member>
        <member name="T:Documents.Models.RegisterViewModel">
            <summary>
            Represents register data for new user
            </summary>
        </member>
        <member name="P:Documents.Models.RegisterViewModel.UserName">
            <summary>
            User Name
            </summary>
        </member>
        <member name="P:Documents.Models.RegisterViewModel.Login">
            <summary>
            User Login
            </summary>
        </member>
        <member name="P:Documents.Models.RegisterViewModel.Password">
            <summary>
            User Password
            </summary>
        </member>
        <member name="T:Documents.Models.UserProfileViewModel">
            <summary>
            Represents user profile information
            </summary>
        </member>
        <member name="P:Documents.Models.UserProfileViewModel.UserName">
            <summary>
            User Name
            </summary>
        </member>
        <member name="P:Documents.Models.UserProfileViewModel.Login">
            <summary>
            User Login
            </summary>
        </member>
        <member name="P:Documents.Models.UserProfileViewModel.Password">
            <summary>
            User Password
            </summary>
        </member>
        <member name="T:Documents.Models.LoginViewModel">
            <summary>
            Represents user login data
            </summary>
        </member>
        <member name="P:Documents.Models.LoginViewModel.Login">
            <summary>
            User Login
            </summary>
        </member>
        <member name="P:Documents.Models.LoginViewModel.Password">
            <summary>
            User Password
            </summary>
        </member>
    </members>
</doc>
